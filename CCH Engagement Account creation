IMPORTANT!; This is just sample script to use as a guide and is not mean to be use in a real IT production Inviroment!!

#region Assembly Loading
# Method 1: Loading assemblies using Add-Type
# These DLLs are part of the Trial Balance and Engagement system
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.TrialBalance.Api\v4.0_2022.1.1.1__f020f9ad409246db\Pfx.TrialBalance.Api.dll"
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.CommonLibrary\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.CommonLibrary.dll"
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.Engagement.Infrastructure\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.Engagement.Infrastructure.dll"
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.TrialBalance.BL\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.TrialBalance.BL.dll"
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.Engagement.API\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.Engagement.API.dll"
Add-Type -Path "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.KnowledgeCoach.Interface\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.KnowledgeCoach.Interface.dll"

# Method 2: Loading assemblies using System.Reflection
# This is an alternative method to load the same assemblies
# Both methods are included, though one would typically choose one approach
[System.Reflection.Assembly]::LoadFrom('C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.TrialBalance.Api\v4.0_2022.1.1.1__f020f9ad409246db\Pfx.TrialBalance.Api.dll')
[System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.CommonLibrary\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.CommonLibrary.dll")
[System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.Engagement.Infrastructure\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.Engagement.Infrastructure.dll")
[System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.TrialBalance.BL\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.TrialBalance.BL.dll")
[System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.Engagement.API\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.Engagement.API.dll")
[System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.KnowledgeCoach.Interface\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.KnowledgeCoach.Interface.dll")
#endregion

# EngagementUserCreation.ps1
#
# .SYNOPSIS
# Automates the creation of new users in the Engagement system with appropriate licenses and permissions.
#
# .DESCRIPTION
# This PowerShell script facilitates the automated creation of new users in the Engagement system.
# It handles department mapping, rights assignment, and license allocation for Trial Balance 
# and Workpaper Management products. The script includes error handling and license availability checks.
#
# .REQUIREMENTS
# - Pfx.Engagement.API.dll must be installed in the GAC
# - Administrative access to the Engagement system
# - Available licenses for Trial Balance and Workpaper Management products
#
# .NOTES
# Author: [Eddison Razon]
# Version: 1.0
# Last Modified: [11/26/2024]
# Requires PowerShell 5.1 or later
#

# Sample new hire object creation
# In production, this should be replaced with data from your HR system or other source of truth
$newHire = New-HireObject `
    -FirstName "John" `
    -LastName "Smith" `
    -Email "john.smith@company.com" `
    -Username "jsmith" `
    -Department "Audit" `
    -JobTitle "Senior" `
    -PersonalNumber "555-0123"

Function New-EngagementUser {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True,
                   HelpMessage = "New hire object containing user details")]
        [Object]$newHire
    )

    try {
        # Load the Engagement API assembly
        # This step is crucial for accessing the Engagement system's functionality
        $Null = [System.Reflection.Assembly]::LoadFrom("C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Pfx.Engagement.API\v4.0_2022.1.1.1__21b98a3ae763e7ad\Pfx.Engagement.API.dll")

        # Configure server deployment type
        # $IsCentral should be set to $true for central server deployments
        $IsCentral = $true

        # Initialize API context with authentication credentials
        # TODO: In production, implement secure credential management
        # WARNING: Never store credentials in plain text in production
        $CreateApiContext = [Pfx.Engagement.API.ApiFactory]::CreateApiContext(
            "EngagementServer",
            $IsCentral,
            "ADMIN",
            "Password"
        )

        # Initialize License API for managing user licenses
        $ILicenseApi = [Pfx.Engagement.API.ApiFactory]::CreateLicenseApi()
        
        # Retrieve all available license types
        $EngagementLicenseCount = $ILicenseApi.GetAllLicenseTypes($CreateApiContext)

        # Initialize Staff API for user management operations
        $CreateStaffApi = [Pfx.Engagement.API.ApiFactory]::CreateStaffApi()

        # Filter and get specific license types needed
        $TrialBalance = $EngagementLicenseCount | Where { $_.ProductName -like "Engagement Trial Balance" }
        $WorkpaperManagement = $EngagementLicenseCount | Where { $_.ProductName -like "Engagement Workpaper Management" }

        # Verify license availability before proceeding
        if (($TrialBalance.AvailableLicenses -gt 0) -and ($WorkpaperManagement.AvailableLicenses -gt 0)) {
            
            # Department mapping
            # TODO: Replace placeholder IDs with your organization's actual department IDs
            $DepartmentId = switch -regex ($NewHire.Department) {
                "^Admin"    { "<Your_Admin_Dept_ID>" }
                "^Audit"    { "<Your_Audit_Dept_ID>" }
                "^Tax"      { "<Your_Tax_Dept_ID>" }
                "^Advisory" { "<Your_Advisory_Dept_ID>" }
                default     { "<Your_Default_Dept_ID>" }
            }

            # Rights group mapping based on job title
            # TODO: Replace placeholder IDs with your organization's actual rights group IDs
            $RightsGroupId = switch -regex ($NewHire.JobTitle) {
                "^Associate"   { "<Your_Associate_Rights_ID>" }
                "^Senior"      { "<Your_Senior_Rights_ID>" }
                "^Supervisor"  { "<Your_Supervisor_Rights_ID>" }
                "^Manager"     { "<Your_Manager_Rights_ID>" }
                "^Partner"     { "<Your_Partner_Rights_ID>" }
                default        { "<Your_Default_Rights_ID>" }
            }

            # Create new staff request object with user details
            $newStaffRequest = New-Object -TypeName Pfx.Engagement.API.Staff.StaffAddRequestDto -Property @{
                RightsGroupId = $RightsGroupId
                Active        = $true
                FirstName     = $newHire.FirstName
                LastName      = $newHire.LastName
                # Generate staff initials using first two letters of first and last name
                StaffInitial  = ($newHire.FirstName[0] + $newHire.FirstName[1] + "." + 
                               $newHire.LastName[0] + $newHire.LastName[1])
                WorkeMail     = $newHire.Email
                MiddleName    = ""
                Login         = $newHire.Username
                DepartmentId  = $DepartmentId
                StaffTitleId  = ""
                PersonalTitle = ""
                HomeEmail     = $newHire.Email
                PhoneNumber   = $newHire.PersonalNumber
                MachineName   = "MachineName"
            }

            # Create the new user in the system
            $staffApi = [Pfx.Engagement.API.ApiFactory]::CreateStaffApi()
            $staffApi.Add($CreateApiContext, $newStaffRequest)

            # Retrieve the newly created user's GUID for license assignment
            $GetAll = $CreateStaffApi.GetAll($CreateApiContext)
            $NewStaff = $GetAll | where { $_.WorkEmail -like "$($newHire.Email)" }

            # Assign Trial Balance license to the new user
            $ILicenseApi.AssignLicensesToStaff(
                $CreateApiContext,
                $NewStaff.StaffGuid.Guid.Guid,
                $TrialBalance.LicenseGuid.Guid.Guid
            )

            Write-Host "User successfully created and licensed in the Engagement system"
        }
        else {
            throw "Insufficient licenses available. Please check license availability."
        }
    }
    catch {
        Write-Error "Error creating new user: $_"
        throw
    }
}

# Example usage:
# $newHire = New-HireObject -FirstName "Jane" -LastName "Doe" [...]
# New-EngagementUser -newHire $newHire
